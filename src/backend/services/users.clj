(ns backend.services.users
  (:require
   [backend.util :refer [random-str]]
   [backend.stores :refer [with-redis]]
   [taoensso.carmine :as car]))

;;; User creation

(def user-model {:user-id   "" ; <= generated by Redis INCR
                 :username  "" 
                 :password  ""
                 :followers #{}
                 :following #{}})

(defn next-user-id []
  (with-redis (car/incr :next_user_id)))

(defn create-user [email password]
  (let [user-id (next-user-id)
        auth    (random-str)]
    (with-redis
      (car/hset :users email user-id) ; for lookups of user-id by username
      (car/hset :auths auth user-id)     ; for auth cookie lookups
      (car/hmset* (str "user:" user-id)
                  {:username email
                   :password password
                   :auth     auth}))))

;;; Authentication

(defn get-user-id [email]
  (with-redis (car/hget :users email)))

(defn authenticate [email password]
  (when-let [user-id (get-user-id email)]
    (let [user-key (str "user:" user-id)]
      (when (= password (with-redis (car/hget user-key :password)))
        {:user-id user-id
         :auth    (with-redis (car/hget user-key :auth))}))))

(defn- get-user-auth [user-id]
  (car/hget (str "user:" user-id) :auth))

(defn logged-in? [user-id auth]
  (let [[user-id* auth*] (with-redis
                           (car/hget :auths auth)
                           (get-user-auth user-id))]
    (and (= user-id user-id*) (= auth auth*))))

(defn logout [user-id]
  (let [new-auth (random-str)]
    (with-redis
      (let [old-auth (get-user-auth user-id)]
        (car/hdel :auths old-auth)
        (car/hset :auths new-auth user-id)
        (car/hset (str "user:" user-id) :auth new-auth)))))
